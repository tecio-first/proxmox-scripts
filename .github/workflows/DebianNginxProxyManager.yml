name: Nginx Proxy Manager
run-name: Debian Linux Matrix Build ðŸš€
on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    tags-ignore: [ '*' ]
jobs:
    ProxyManagerOn:
      runs-on: ubuntu-latest
      continue-on-error: true
      strategy:
        matrix:
          debian: ['debian:10', 'debian:11', 'debian:12']
      container:
        image: ${{ matrix.debian }}
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
          with:
            path: main
        - name: Test action output
          run: |

            # Docker related stuff
            export TERM=xterm
            export DEBIAN_FRONTEND=noninteractive
            # Install Packages
            apt-get update && apt-get install wget unzip zip -y
            
            # Set Variables
            export EPS_BASE_URL=$GITHUB_WORKSPACE/main
            export EPS_CT_INSTALL=false
            export EPS_CLEANUP=${EPS_CLEANUP:-false}
            EPS_APP_NAME=${EPS_APP_NAME:-nginx-proxy-manager}
            # Manipulate the config.sh file for the Nginx Proxy Manager
            sed -i 's|EPS_SERVICE_FILE=/lib/systemd/system/npm.service|EPS_SERVICE_FILE=/etc/init.d/npm|' $EPS_BASE_URL/apps/$EPS_APP_NAME/config.sh
            #cat $EPS_BASE_URL/apps/$EPS_APP_NAME/config.sh
            #sed -i 's|EPS_SERVICE_DATA=.*|EPS_SERVICE_DATA='\''#!/bin/sh\n### BEGIN INIT INFO\n# Provides:npm\n# Required-Start:$network $local_fs $remote_fs\n# Required-Stop:$network $local_fs $remote_fs\n# Default-Start:2 3 4 5\n# Default-Stop:0 1 6\n# Short-Description:Start/stop Nginx Proxy Manager\n### END INIT INFO\ncase "$1" in\n  start)\n    echo "Starting Nginx Proxy Manager..."\n    mkdir -p /tmp/nginx/body /data/letsencrypt-acme-challenge\n    NODE_ENV=production /usr/local/bin/node /app/index.js --abort_on_uncaught_exception --max_old_space_size=250 &\n    ;;\n  stop)\n    echo "Stopping Nginx Proxy Manager..."\n    killall node\n    ;;\n  *)\n    echo "Usage:/etc/init.d/npm {start|stop}"\n    exit 1\n    ;;\nesac\nexit 0'\''|' $EPS_BASE_URL/apps/$EPS_APP_NAME/config.sh
            
            echo '#!/bin/sh' > replacement.txt
            echo '### BEGIN INIT INFO' >> replacement.txt
            echo '# Provides          npm' >> replacement.txt
            echo '# Required-Start    $network $local_fs $remote_fs' >> replacement.txt
            echo '# Required-Stop     $network $local_fs $remote_fs' >> replacement.txt
            echo '# Default-Start     2 3 4 5' >> replacement.txt
            echo '# Default-Stop      0 1 6' >> replacement.txt
            echo '# Short-Description Start/stop Nginx Proxy Manager' >> replacement.txt
            echo '### END INIT INFO' >> replacement.txt
            echo 'case "$1" in' >> replacement.txt
            echo '    start)' >> replacement.txt
            echo '        echo "Starting Nginx Proxy Manager..."' >> replacement.txt
            echo '        mkdir -p /tmp/nginx/body /data/letsencrypt-acme-challenge' >> replacement.txt
            echo '        NODE_ENV=production /usr/local/bin/node /app/index.js --abort_on_uncaught_exception --max_old_space_size=250 &' >> replacement.txt
            echo '        ;;' >> replacement.txt
            echo '    stop)' >> replacement.txt
            echo '        echo "Stopping Nginx Proxy Manager..."' >> replacement.txt
            echo '        killall node' >> replacement.txt
            echo '        ;;*)' >> replacement.txt
            echo '        echo "Usage:/etc/init.d/npm {start|stop}"' >> replacement.txt
            echo '        exit 1' >> replacement.txt
            echo '        ;;' >> replacement.txt
            echo 'esac' >> replacement.txt
            echo 'exit 0' >> replacement.txt

            sed -i "/EPS_SERVICE_DATA=/c\EPS_SERVICE_DATA=\"\$(<replacement.txt)\"" $EPS_BASE_URL/apps/$EPS_APP_NAME/config.sh


            export EPS_APP_CONFIG=${EPS_APP_CONFIG:-$(cat $EPS_BASE_URL/apps/$EPS_APP_NAME/config.sh)}
            export EPS_OS_NAME=$(uname)
            export EPS_OS_DISTRO=$(awk -F'=' '/^ID=/{ print $NF }' /etc/os-release)
            # Manipulate the common.sh file for stty/pushd/disown/popd command 
            # and activate verbose mode and deactivate spinner
            sed -i 's/__OUTPUT=\/dev\/null/__OUTPUT=\/dev\/stdout/' $EPS_BASE_URL/utils/common.sh
            sed -i 's/__start_spinner &/#__start_spinner &/' $EPS_BASE_URL/utils/common.sh
            sed -i 's/__SPIN_PID=$!/#__SPIN_PID=$!/' $EPS_BASE_URL/utils/common.sh
            sed -i 's/stty/#stty/' $EPS_BASE_URL/utils/common.sh
            # Service related stuff for Sysvinit
            sed -i 's/systemctl daemon-reload >$__OUTPUT/service $@ restart >$__OUTPUT/' $EPS_BASE_URL/utils/debian.sh
            sed -i 's/systemctl stop $@ &>$__OUTPUT/service $@ stop >$__OUTPUT/' $EPS_BASE_URL/utils/debian.sh
            sed -i 's/systemctl stop $@ >$__OUTPUT/service $@ stop >$__OUTPUT/' $EPS_BASE_URL/utils/debian.sh
            sed -i 's/systemctl enable --now $@ >$__OUTPUT/chkconfig $@ on >$__OUTPUT/' $EPS_BASE_URL/utils/debian.sh
            sed -i 's/systemctl start $@ >$__OUTPUT/service $@ start >$__OUTPUT/' $EPS_BASE_URL/utils/debian.sh
            #sed -i 's/pushd/cd/' $EPS_BASE_URL/utils/common.sh
            sed -i 's/disown/#disown/' $EPS_BASE_URL/utils/common.sh
            sed -i 's/popd/#popd/' $EPS_BASE_URL/utils/common.sh
            # export and execute the common.sh and alpine.sh and APP install.sh files
            export EPS_UTILS_COMMON=${EPS_UTILS_COMMON:-$(cat $EPS_BASE_URL/utils/common.sh)}
            export EPS_UTILS_DISTRO=${EPS_UTILS_DISTRO:-$(cat $EPS_BASE_URL/utils/debian.sh)}
            source <(echo -n "$EPS_UTILS_COMMON")
            source <(echo -n "$EPS_UTILS_DISTRO")
            source <(echo -n "$EPS_APP_CONFIG")
            export EPS_APP_INSTALL=${EPS_APP_INSTALL:-$(cat $EPS_BASE_URL/apps/$EPS_APP_NAME/install.sh)}
            source <(echo -n "$EPS_APP_INSTALL")
          shell: bash

          